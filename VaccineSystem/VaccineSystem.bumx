machine VaccineSystem
sees VaccineSystemContext

variables
	registered
	administrators
	staff
	citizens
	NHSNumbersOfCitizens
	namesOfCitizens
	loggedin
	loggedout
	passwords

invariants
	@inv1: registered ⊆ USER
	@inv2: administrators ⊆ registered
	@inv3: staff ⊆ registered
	@inv4: citizens ⊆ registered
	@inv5: partition(registered, administrators, staff, citizens)
	//user can only have one role
	////@inv5: administrators ∩ staff ∩ citizens = ∅
	//not sure what this shows
	////@inv7: administrators ∪ staff ∪ citizens = registered
	
	//a set of ordered pairs, only in registered once - function, all registered must be there - total, don't have to be unique (injective), or surjective
	@inv6: passwords ∈ registered → PASSWORDS
	
	@inv8: loggedin ⊆ registered
	@inv9: loggedout ⊆ registered
	@inv10: partition(registered, loggedin, loggedout)
	//@inv10: loggedin ∩ loggedout = ∅
	
	//@inv11: NHSNumbersOfCitizens ∈ citizens ↣ ℕ  //citizen only once, all of them --total function..  NHSno must be unique --injective
	@inv11: NHSNumbersOfCitizens ∈ ℕ ⤀ citizens
	@inv14: namesOfCitizens ∈ citizens → STRING  //citizen only once, all of them -- total function,,  name can appear any amount of times

events
	//check this - INITIALISATION sets all the variables to empty sets, I have no idea how to add a root user
	//Update->
	
	event INITIALISATION
	then
		@act1: registered, staff, citizens, loggedin, loggedout, passwords,administrators, NHSNumbersOfCitizens, namesOfCitizens ≔ ∅,∅,∅,∅, ∅, ∅, ∅, ∅, ∅
		//update: add an initial administrator so they can do the stuff - like start the events running
		
	end
	
	//Adds a root administrator
	event RootAdmin
	any user password where
	 	@grd1: administrators = ∅
	 	@grd2: registered = ∅
	 	@grd3: user ∈ USER
	 	@grd4: password ∈ PASSWORDS
	then
	 	@act1: registered ≔ registered ∪ {user}
		@act2: passwords ≔ passwords ∪ {user ↦ password}
		@act3: administrators ≔ administrators ∪ {user}
		@act4: loggedout ≔ loggedout ∪ {user}
	end
	
	//An administrator registers a new administrator and adds there password to the relation
	event RegisterAdmin
	any admin user password where
		@grd1: admin ∈ administrators
		@grd2: password ∈ PASSWORDS
		@grd3: user ∈ USER ∖ registered
	then
		@act1: registered ≔ registered ∪ {user}
		@act2: passwords ≔ passwords ∪ {user ↦ password}
		@act3: administrators ≔ administrators ∪ {user}
		@act4: loggedout ≔ loggedout ∪ {user}
	end
	
	//An administrator registers a new staff member and adds there password to the relation
	event RegisterStaff
	any admin user password where
		@grd1: admin ∈ administrators
		@grd2: password ∈ PASSWORDS
		@grd3: user ∈ USER ∖ registered
		@grd4: administrators ≠ ∅
	then
		@act1: registered ≔ registered ∪ {user}
		@act2: passwords ≔ passwords ∪ {user ↦ password}
		@act3: staff ≔ staff ∪ {user}
		@act4: loggedout ≔ loggedout ∪ {user}
	end
	
	//A citizen can register an account in the system
	event RegisterCitizen
	any user password nam no where
		@grd1: user ∈ USER
		@grd2: password ∈ PASSWORDS
		//can't register twice/have same username
		@grd3: user ∉ registered
		@grd4: administrators ≠ ∅
		@grd5: nam ∈ STRING
		@grd6: no ∈ ℕ
		@grd7: no ∉ dom(NHSNumbersOfCitizens)
		
	then
		@act1: registered ≔ registered ∪ {user}
		@act2: passwords ≔ passwords ∪ {user ↦ password}
		@act3: citizens ≔ citizens ∪ {user}
		@act4: loggedout ≔ loggedout ∪ {user}
		@act5: NHSNumbersOfCitizens ≔  NHSNumbersOfCitizens ∪ {no ↦ user}
		@act6: namesOfCitizens ≔  namesOfCitizens ∪ {user ↦ nam}
	end
	
	//A user changes their password
	event ChangePassword
	any user password where
		@grd1: user ∈ registered
		@grd2: password ∈ PASSWORDS
	then
		@act1: passwords(user) ≔ password
	end
	
	//A user logs into the system
	event Login
	any user password where
		@grd1: user ∈ registered
		@grd2: user ∈ loggedout
		@grd3: password ∈ PASSWORDS
		
		//is this something we can do?       
		@grd4: passwords(user) = password
	then
		@act1: loggedin ≔ loggedin ∪ {user}
		@act2: loggedout ≔ loggedout ∖ {user}
	end
	
	//A user logs out of the system
	event Logout
	any user where
		@grd1: user ∈ registered
		@grd2: user ∈ loggedin
	then
		@act1: loggedout ≔ loggedout ∪ {user}
		@act2: loggedin ≔ loggedin ∖ {user}
	end
end